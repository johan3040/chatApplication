"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const constants_1 = require("./constants");
const logging_1 = require("./logging");
const get_build_tools_installer_path_1 = require("./utils/get-build-tools-installer-path");
const get_python_installer_path_1 = require("./utils/get-python-installer-path");
const PYTHON_INSTALLER = path.join(constants_1.OFFLINE_PATH || '', constants_1.PYTHON.installerName);
const VS_INSTALLER = path.join(constants_1.OFFLINE_PATH || '', constants_1.BUILD_TOOLS.installerName);
/**
 * Check if the installer at a given path can be found and error out if
 * it does not exist.
 *
 * @param {string} installerPath
 * @param {string} installerName
 * @returns {boolean}
 */
function ensureInstaller(installerPath, installerName) {
    if (!fs.existsSync(installerPath)) {
        if (constants_1.IS_DRY_RUN) {
            logging_1.log(`Dry run: Installer ${installerPath} not found, would have stopped here.`);
            return;
        }
        let message = `Offline installation: Offline path ${constants_1.OFFLINE_PATH} was passed, `;
        message += `but we could not find ${installerName} in that path. `;
        message += `Aborting installation now.`;
        logging_1.error(message);
        process.exit(1);
    }
}
/**
 * Copy the installers from their offline directory to their target directory.
 *
 * @returns {Promise.void}
 */
async function copyInstallers() {
    if (!constants_1.OFFLINE_PATH) {
        throw new Error(`npm_config_offline_installers not found!`);
    }
    ensureInstaller(PYTHON_INSTALLER, constants_1.PYTHON.installerName);
    ensureInstaller(VS_INSTALLER, constants_1.BUILD_TOOLS.installerName);
    if (constants_1.IS_DRY_RUN) {
        logging_1.log(`Dry run: Would have copied installers.`);
        return;
    }
    try {
        await fs.copy(PYTHON_INSTALLER, get_python_installer_path_1.getPythonInstallerPath().path);
        await fs.copy(VS_INSTALLER, get_build_tools_installer_path_1.getBuildToolsInstallerPath().path);
    }
    catch (error) {
        let message = `Offline installation: Could not copy over installers. `;
        message += `Aborting installation now.\n`;
        message += error;
        error(message);
        process.exit(1);
    }
}
exports.copyInstallers = copyInstallers;
//# sourceMappingURL=offline.js.map