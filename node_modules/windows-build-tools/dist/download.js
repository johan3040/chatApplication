"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nugget = require("nugget");
const chalk_1 = require("chalk");
const constants_1 = require("./constants");
const logging_1 = require("./logging");
const get_build_tools_installer_path_1 = require("./utils/get-build-tools-installer-path");
const get_python_installer_path_1 = require("./utils/get-python-installer-path");
/**
 * Downloads the Visual Studio C++ Build Tools and Python installer to a temporary folder
 * at %USERPROFILE%\.windows-build-tools
 */
async function download(cb) {
    const handleFailure = (error, name) => {
        logging_1.log(chalk_1.default.bold.red(`Downloading ${name} failed. Error:`), error);
        logging_1.log(chalk_1.default.bold.red(`windows-build-tools will now exit.`));
        process.exit(1);
    };
    if (!constants_1.IS_PYTHON_INSTALLED) {
        try {
            await downloadTools(get_python_installer_path_1.getPythonInstallerPath());
        }
        catch (error) {
            handleFailure(error, 'Python');
        }
    }
    if (!constants_1.IS_BUILD_TOOLS_INSTALLED) {
        try {
            await downloadTools(get_build_tools_installer_path_1.getBuildToolsInstallerPath());
        }
        catch (error) {
            handleFailure(error, 'Visual Studio Build Tools');
        }
    }
    cb();
}
exports.download = download;
/**
 * Downloads specified file with a url from the installer.
 */
function downloadTools(installer) {
    return new Promise((resolve, reject) => {
        const nuggetOptions = {
            target: installer.fileName,
            dir: installer.directory,
            resume: process.env.npm_config_resume || true,
            verbose: true,
            strictSSL: process.env.npm_config_strict_ssl || false,
            proxy: process.env.npm_config_proxy || process.env.PROXY || undefined,
            sockets: process.env.npm_config_sockets || undefined
        };
        const nuggetCallback = (errors) => {
            if (errors) {
                // nugget returns an array of errors but we only need 1st because we only have 1 url
                const error = errors[0];
                if (error.message.indexOf('404') === -1) {
                    return reject(error);
                }
                else {
                    return reject(new Error(`Could not find ${installer.fileName} at ${installer.url}`));
                }
            }
            logging_1.log(`Downloaded ${installer.fileName}. Saved to ${installer.path}.`);
            resolve(installer.path);
        };
        if (constants_1.IS_DRY_RUN) {
            nuggetCallback();
        }
        else {
            // Log double newline because Nugget is the worst about overwriting
            // output
            logging_1.log('\n');
            nugget(installer.url, nuggetOptions, nuggetCallback);
        }
    });
}
//# sourceMappingURL=download.js.map