"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const path = require("path");
const constants_1 = require("./constants");
const logging_1 = require("./logging");
const execute_child_process_1 = require("./utils/execute-child-process");
const debug = require('debug')('windows-build-tools');
/**
 * Uses PowerShell to configure the environment for
 * msvs_version 2015 and npm python 2.7
 *
 * @params variables an object with paths for different environmental variables
 */
function setEnvironment(env) {
    const scriptPath = constants_1.IS_DRY_RUN
        ? path.join(__dirname, '..', 'ps1', 'dry-run.ps1')
        : path.join(__dirname, '..', 'ps1', 'set-environment.ps1');
    let pythonArguments = '';
    let buildArguments = '';
    // Should we configure Python?
    if (env.python.toConfigure) {
        const pythonPath = path.join(env.python.installPath);
        const pythonExePath = path.join(pythonPath, 'python.exe');
        pythonArguments += ` -ConfigurePython -pythonPath '${pythonPath}' -pythonExePath '${pythonExePath}'`;
    }
    // Should we configure the VS Build Tools?
    if (env.buildTools.toConfigure) {
        buildArguments += ` -ConfigureBuildTools`;
    }
    // Log what we're doing
    if (pythonArguments && buildArguments) {
        logging_1.log(chalk_1.default.bold.green(`Now configuring the Visual Studio Build Tools and Python...`));
    }
    else if (pythonArguments) {
        logging_1.log(chalk_1.default.bold.green(`Now configuring Python...`));
    }
    else if (buildArguments) {
        logging_1.log(chalk_1.default.bold.green(`Now configuring the Visual Studio Build Tools..`));
    }
    else {
        logging_1.log(chalk_1.default.bold.green(`Skipping configuration: No configuration for Python or Visual Studio Build Tools required.`));
        return;
    }
    const maybeArgs = `${pythonArguments}${buildArguments}`;
    const psArgs = `& {& '${scriptPath}' ${maybeArgs} }`;
    const args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs];
    return execute_child_process_1.executeChildProcess('powershell.exe', args)
        .then(() => logging_1.log(chalk_1.default.bold.green(`\nAll done!\n`)))
        .catch((error) => debug(`Encountered environment setting error: ${error}`));
}
exports.setEnvironment = setEnvironment;
//# sourceMappingURL=environment.js.map